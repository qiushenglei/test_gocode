// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: message.proto

package messageCrypto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageEncryptionClient is the client API for MessageEncryption service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageEncryptionClient interface {
	SingleEncryption(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SingleResponse, error)
	SingleDecrypt(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SingleResponse, error)
	Encryption(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error)
	Decrypt(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error)
}

type messageEncryptionClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageEncryptionClient(cc grpc.ClientConnInterface) MessageEncryptionClient {
	return &messageEncryptionClient{cc}
}

func (c *messageEncryptionClient) SingleEncryption(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SingleResponse, error) {
	out := new(SingleResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageEncryption/SingleEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEncryptionClient) SingleDecrypt(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SingleResponse, error) {
	out := new(SingleResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageEncryption/SingleDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEncryptionClient) Encryption(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.MessageEncryption/Encryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEncryptionClient) Decrypt(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.MessageEncryption/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageEncryptionServer is the server API for MessageEncryption service.
// All implementations must embed UnimplementedMessageEncryptionServer
// for forward compatibility
type MessageEncryptionServer interface {
	SingleEncryption(context.Context, *Message) (*SingleResponse, error)
	SingleDecrypt(context.Context, *Message) (*SingleResponse, error)
	Encryption(context.Context, *BatchRequest) (*Response, error)
	Decrypt(context.Context, *BatchRequest) (*Response, error)
	mustEmbedUnimplementedMessageEncryptionServer()
}

// UnimplementedMessageEncryptionServer must be embedded to have forward compatible implementations.
type UnimplementedMessageEncryptionServer struct {
}

func (UnimplementedMessageEncryptionServer) SingleEncryption(context.Context, *Message) (*SingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleEncryption not implemented")
}
func (UnimplementedMessageEncryptionServer) SingleDecrypt(context.Context, *Message) (*SingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleDecrypt not implemented")
}
func (UnimplementedMessageEncryptionServer) Encryption(context.Context, *BatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encryption not implemented")
}
func (UnimplementedMessageEncryptionServer) Decrypt(context.Context, *BatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedMessageEncryptionServer) mustEmbedUnimplementedMessageEncryptionServer() {}

// UnsafeMessageEncryptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageEncryptionServer will
// result in compilation errors.
type UnsafeMessageEncryptionServer interface {
	mustEmbedUnimplementedMessageEncryptionServer()
}

func RegisterMessageEncryptionServer(s grpc.ServiceRegistrar, srv MessageEncryptionServer) {
	s.RegisterService(&MessageEncryption_ServiceDesc, srv)
}

func _MessageEncryption_SingleEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEncryptionServer).SingleEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageEncryption/SingleEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEncryptionServer).SingleEncryption(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEncryption_SingleDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEncryptionServer).SingleDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageEncryption/SingleDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEncryptionServer).SingleDecrypt(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEncryption_Encryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEncryptionServer).Encryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageEncryption/Encryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEncryptionServer).Encryption(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEncryption_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEncryptionServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageEncryption/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEncryptionServer).Decrypt(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageEncryption_ServiceDesc is the grpc.ServiceDesc for MessageEncryption service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageEncryption_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageEncryption",
	HandlerType: (*MessageEncryptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleEncryption",
			Handler:    _MessageEncryption_SingleEncryption_Handler,
		},
		{
			MethodName: "SingleDecrypt",
			Handler:    _MessageEncryption_SingleDecrypt_Handler,
		},
		{
			MethodName: "Encryption",
			Handler:    _MessageEncryption_Encryption_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _MessageEncryption_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
