// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSerivceClient is the client API for UserSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSerivceClient interface {
	// 定义获取用户列表信息方法
	GetUserList(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserListReply, error)
	// 定义获取用户信息方法
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
}

type userSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSerivceClient(cc grpc.ClientConnInterface) UserSerivceClient {
	return &userSerivceClient{cc}
}

func (c *userSerivceClient) GetUserList(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserListReply, error) {
	out := new(UserListReply)
	err := c.cc.Invoke(ctx, "/pdfiles.user.UserSerivce/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSerivceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/pdfiles.user.UserSerivce/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSerivceServer is the server API for UserSerivce service.
// All implementations must embed UnimplementedUserSerivceServer
// for forward compatibility
type UserSerivceServer interface {
	// 定义获取用户列表信息方法
	GetUserList(context.Context, *UserRequest) (*UserListReply, error)
	// 定义获取用户信息方法
	GetUser(context.Context, *UserRequest) (*UserReply, error)
	mustEmbedUnimplementedUserSerivceServer()
}

// UnimplementedUserSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSerivceServer struct {
}

func (UnimplementedUserSerivceServer) GetUserList(context.Context, *UserRequest) (*UserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserSerivceServer) GetUser(context.Context, *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserSerivceServer) mustEmbedUnimplementedUserSerivceServer() {}

// UnsafeUserSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSerivceServer will
// result in compilation errors.
type UnsafeUserSerivceServer interface {
	mustEmbedUnimplementedUserSerivceServer()
}

func RegisterUserSerivceServer(s grpc.ServiceRegistrar, srv UserSerivceServer) {
	s.RegisterService(&UserSerivce_ServiceDesc, srv)
}

func _UserSerivce_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSerivceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfiles.user.UserSerivce/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSerivceServer).GetUserList(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSerivce_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSerivceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfiles.user.UserSerivce/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSerivceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSerivce_ServiceDesc is the grpc.ServiceDesc for UserSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfiles.user.UserSerivce",
	HandlerType: (*UserSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserList",
			Handler:    _UserSerivce_GetUserList_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserSerivce_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
